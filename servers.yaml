---
Description: My Udacity Cloudformation Project

Parameters:
  AMItoUse:
    Type: String
  
  EnvironmentName:
    Type: String

Resources:

  ProfileWithRolesForOurApp:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles:
        - UdacityS3ReadOnlyEC2

  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Allows ssh and http to the servers only
      GroupName: webappsecuritygroup
      SecurityGroupEgress: 
        -   CidrIp: 0.0.0.0/0
            FromPort: 0
            IpProtocol: tcp
            ToPort: 65535
      SecurityGroupIngress: 
        -   CidrIp: 0.0.0.0/0
            FromPort: 80
            IpProtocol: tcp
            ToPort: 80
        -   CidrIp: 0.0.0.0/0
            FromPort: 8080
            IpProtocol: tcp
            ToPort: 8080
        -   CidrIp: 0.0.0.0/0
            FromPort: 22
            IpProtocol: tcp
            ToPort: 22
      VpcId:
        Fn::ImportValue:
          !Sub ${EnvironmentName}-VPC

  LBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Allows http traffic to the application load balancer
      SecurityGroupEgress: 
        -   CidrIp: 0.0.0.0/0
            FromPort: 80
            IpProtocol: tcp
            ToPort: 80
      SecurityGroupIngress: 
        -   CidrIp: 0.0.0.0/0
            FromPort: 80
            IpProtocol: tcp
            ToPort: 80
      VpcId:
        Fn::ImportValue:
          !Sub ${EnvironmentName}-VPC 

  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn: ProfileWithRolesForOurApp
    Properties: 
      BlockDeviceMappings: 
        - DeviceName: "/dev/sdk"
          Ebs: 
              DeleteOnTermination: true
              VolumeSize: 10
              VolumeType: "standard"
      IamInstanceProfile: !Ref ProfileWithRolesForOurApp
      ImageId: !Ref AMItoUse
      InstanceType: t3.medium
      LaunchConfigurationName: myudacityprojectlaunchconfig
      SecurityGroups: 
        - !Ref AppSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          echo "it works! Udagram, Udacity" > index.html

  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: AppTargetGroup
    Properties:
      DesiredCapacity: 4
      HealthCheckGracePeriod: 60
      LaunchConfigurationName: !Ref LaunchConfig
      MaxSize: '4'
      MinSize: '2'
      TargetGroupARNs: 
        - !Ref AppTargetGroup
      VPCZoneIdentifier: 
        - Fn::ImportValue: !Sub ${EnvironmentName}-PRIV-NETS-AZ1
          Fn::ImportValue: !Sub ${EnvironmentName}-PRIV-NETS-AZ2

  AppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      IpAddressType: ipv4
      SecurityGroups: 
        - !Ref LBSecurityGroup
      Subnets: 
        - Fn::ImportValue: !Sub ${EnvironmentName}-PB-AZ1
        - Fn::ImportValue: !Sub ${EnvironmentName}-PB-AZ2
  
  AppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      HealthCheckIntervalSeconds: 20
      HealthCheckPath: "/"
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 18
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 4
      VpcId:
        Fn::ImportValue:
          !Sub ${EnvironmentName}-VPC 

  AppLBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: AppLoadBalancer
    Properties: 
      DefaultActions: 
        - TargetGroupArn: !Ref AppTargetGroup
          Type: forward
      LoadBalancerArn: !Ref AppLoadBalancer
      Port: 80
      Protocol: HTTP
  
  APPLBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties: 
      Actions: 
        - TargetGroupArn: !Ref AppTargetGroup
          Type: forward
      Conditions: 
        -   Field: path-pattern
            Values: 
              - '/'
      ListenerArn: !Ref AppLBListener
      Priority: 1

Outputs:
  
  LoadBalancerPublicURL:
    Value: !Join ['', [ 'http://', !GetAtt AppLoadBalancer.DNSName ]]
    Export:
      Name: !Sub ${EnvironmentName}-LoadBalancer
